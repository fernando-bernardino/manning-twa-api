management:
  health.db.enabled: false
  endpoints:    
    web:
      base-path: /
      exposure:
        include: "*"

server:
  port: 4070
  servlet:
    context-path: /api/flights/clusters

jetty:
  threadPool:
    maxThreads: 10
    minThreads: 10

chaos:
  monkey:
    enabled: false
    watcher:
      restController: true
    assaults:
      exceptionsActive: true
      latencyActive: true   
      latencyRangeStart: 10
      latencyRangeEnd: 5000  
      
spring:
  profiles:
    active: default

redis:
  host: localhost
  port: 5079

cache:
  settings:
    catalog-city:
      expire-after-write-time: 60 # minutes

connector:
   catalog:
      host: localhost:6070
      responseTimeout: 2000
      connectionTimeout: 2000
      readTimeout: 2000
   pricing:
      host: localhost:5070
      responseTimeout: 10000
      connectionTimeout: 10000
      readTimeout: 10000   
   itineraries-search:
      host: localhost:7070
      responseTimeout: 10000
      connectionTimeout: 10000
      readTimeout: 10000

resilience4j:
  ratelimiter:
    configs:
      default:
        timeoutDuration: 1000
        registerHealthIndicator: true
        limitRefreshPeriod: 10s
        limitForPeriod: 2
  circuitbreaker:
    instances:
      pricing:
        failureRateThreshold: 50
        registerHealthIndicator: true
        ringBufferSizeInHalfOpenState: 2
        ringBufferSizeInClosedState: 4
        waitDurationInOpenState: 10000
        recordExceptions:
          - java.lang.RuntimeException
          - java.lang.InterruptedException
          - io.netty.handler.timeout.ReadTimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException

zookeeper:
  host: localhost:2181
  maxRetries: 2
  timeBetweenRetries: 100
  connectionTimeout: 1000